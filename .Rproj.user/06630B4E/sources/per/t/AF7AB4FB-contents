library(shiny)
library(tibble)
library(DT)
library(knitr)
library(tm)
library(ggplot2)
library(wordcloud)
library(dplyr)
library(fitdistrplus)
library(plyr)
library(data.table)
library(ggplot2)

ui <- fluidPage(
  title = "Dự đoán",
  sidebarLayout(
    sidebarPanel(
      conditionalPanel(
        'input.dataset === "Summary"',
        uiOutput("select")
      ),
      conditionalPanel(
        'input.dataset == "Structure"',
      ),
      conditionalPanel(
        'input.dataset === "Data"',
        uiOutput("xa")
      ),
      conditionalPanel(
        'input.dataset === "Plot"',
        uiOutput("ya"),
        sliderInput(inputId = "bins", label = "Number of bins:", min = 1, max = 50, value = 30)
      ),
    ),
    mainPanel(
      tabsetPanel(
        id="dataset",
        tabPanel("Summary",  verbatimTextOutput("sum")),
        tabPanel("Structure", verbatimTextOutput("cl")),
        tabPanel("Data", DT::dataTableOutput("data")),
        tabPanel("Plot", plotOutput("plot")),
      )
    )
  )
)
dataset <- read.csv("C:/Users/acer/OneDrive/Documents/R-ChuyenDe/giuaki/equipment_Ukraine_Russia_War.csv")
server <- function(output, input) {
  #làm sạch dữ liệu
  clean_data <- reactive({
    na.omit(dataset)
  })
  #dữ liệu chứa các cột là số
  data_num <- reactive({
    data_num <- select_if (clean_data(), is.numeric) 
  })
  #hàm trả về checkbox tab summary
  output$select <- renderUI({
    checkboxGroupInput("show_vars", "Columns in data to show:", names(clean_data()), selected = names(clean_data()))
  })
  #hàm trả về checkbox tab data
  output$xa <- renderUI({
    checkboxGroupInput("show_vars1", "Columns in data to show:", names(clean_data()), selected = names(clean_data()))
  })
  #hàm trả về radiobutton tab plot, trả về các cột chứa số
  output$ya <- renderUI({
    radioButtons("show_vars2", "Choose one variable", names(data_num()), selected = 1)
  })
  #hàm tóm tắt dữ liệu
  output$sum <- renderPrint({
    summary(clean_data()[, input$show_vars, drop = FALSE])
  })
  #hàm hiển thị dữ liệu dạng bảng
  output$data <- DT::renderDataTable({
    clean_data()[, input$show_vars1, drop = FALSE]
  })
  #hàm hiển thị cấu trúc dữ liệu
  output$cl <- renderPrint({
    str(clean_data())
  })
  #hàm vẽ đồ thị
  output$plot <- renderPlot({
    #x <- as.numeric(clean_data()[, c(input$show_vars2), drop = FALSE ])
    #bins <- seq(min(x), max(x), length.out = input$bins + 1)
    hist(dataset$movie_facebook_likes, main = "Histogram of Dataset", breaks = 30, col = "blue", ylab = as.name(input$show_vas2))
  })
}
shinyApp(ui, server)